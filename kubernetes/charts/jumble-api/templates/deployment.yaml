apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "jumble-api.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "jumble-api.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "jumble-api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "jumble-api.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "jumble-api.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
            - name: DB_PATH
              value: data/api_calls.db
            - name: AUTH_TOKEN
            {{- if .Values.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecret }}
                  key: {{ default "auth_token" .Values.existingSecret_key }}
            {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "jumble-api.fullname" . }}-token
                  key: auth_token
            {{- end }}
            {{- if not (empty .Values.env.max_calls) }}
            - name: MAX_CALLS
              value: {{ .Values.env.max_calls | quote }}
            {{- end }}
            {{- if not (empty .Values.env.return_limit) }}
            - name: RETURN_LIMIT
              value: {{ .Values.env.return_limit | quote }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: db-data
              mountPath: /app/data
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: db-data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (printf "%s-db-data" (include "jumble-api.fullname" .)) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
